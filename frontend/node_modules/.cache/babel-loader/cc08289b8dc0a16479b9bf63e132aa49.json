{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\n/**\n * Animate the drawing of the wave\n */\n\n\nvar animateWave = function animateWave(ctx, bounds, style, maxAmp) {\n  var scaleFactor = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\n\n  if (scaleFactor <= 100) {\n    setTimeout(function () {\n      requestAnimationFrame(function () {\n        return drawPoints(ctx, bounds, style, maxAmp, scaleFactor / 100);\n      });\n      animateWave(ctx, bounds, style, maxAmp, scaleFactor + 1);\n    }, 1);\n  }\n};\n/**\n * Calculate all wave data points\n */\n\n\nvar calculateWaveData = exports.calculateWaveData = function calculateWaveData(buffer, width, pointWidth) {\n  if (!buffer) return []; // get the wave data\n\n  var wave = buffer.getChannelData(0);\n  var pointCnt = width / pointWidth; // find how many steps we are going to draw\n\n  var step = Math.ceil(wave.length / pointCnt); // Get array of bounds of each step\n\n  return getBoundArray(wave, pointCnt, step);\n};\n/**\n * Convienence function to draw a point in waveform\n */\n\n\nvar drawPoint = function drawPoint(ctx, x, y, width, height) {\n  ctx.fillRect(x, y, width, height);\n};\n/**\n * Draw all the points in the wave\n */\n\n\nvar drawPoints = function drawPoints(ctx, bounds, style, maxAmp) {\n  var scaleFactor = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\n  bounds.forEach(function (bound, i) {\n    drawPoint(ctx, i * style.pointWidth, (1 + bound.min) * maxAmp, style.pointWidth, Math.max(1, (bound.max - bound.min) * maxAmp) * scaleFactor);\n  });\n};\n/**\n * Draw a waveform on a canvas\n * buffer - waveform buffer\n * canvas - HTML5 canvas reference\n * style - line style to use (color)\n */\n\n\nvar drawWaveform = exports.drawWaveform = function drawWaveform(bounds, canvas, markerStyle) {\n  var position = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : -1;\n  var waveStyle = arguments[4];\n  var height = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 300;\n  var width = arguments[6];\n  if (!canvas || !bounds || !bounds.length) return;\n  var ctx = canvas.getContext('2d'); // clear the canvas\n\n  ctx.clearRect(0, 0, canvas.width, canvas.height); // get our canvas size\n\n  var canvasSize = {\n    height: canvas.height = height,\n    width: canvas.width = width\n  }; // set up line style\n\n  ctx.fillStyle = waveStyle.color; // find the max height we can draw\n\n  var maxAmp = canvasSize.height / 2;\n\n  if (waveStyle.animate) {\n    animateWave(ctx, bounds, waveStyle, maxAmp, 1);\n  } else {\n    drawPoints(ctx, bounds, waveStyle, maxAmp);\n  }\n};\n/**\n * Calculate the bounds of each step in the buffer\n */\n\n\nvar getBoundArray = function getBoundArray(wave, pointCnt, step) {\n  var bounds = [];\n\n  for (var i = 0; i < pointCnt; i++) {\n    // get the max and min values at this step\n    bounds = [].concat(_toConsumableArray(bounds), [getBounds(wave.slice(i * step, i * step + step))]);\n  }\n\n  return bounds;\n};\n/**\n * Get the max and min values of an array\n */\n\n\nvar getBounds = function getBounds(values) {\n  return values.reduce(function (total, v) {\n    return {\n      max: v > total.max ? v : total.max,\n      min: v < total.min ? v : total.min\n    };\n  }, {\n    max: -1.0,\n    min: 1.0\n  });\n};","map":{"version":3,"sources":["/home/avivaid/demoApp/frontend/node_modules/waveform-react/lib/utils.js"],"names":["Object","defineProperty","exports","value","_toConsumableArray","arr","Array","isArray","i","arr2","length","from","animateWave","ctx","bounds","style","maxAmp","scaleFactor","arguments","undefined","setTimeout","requestAnimationFrame","drawPoints","calculateWaveData","buffer","width","pointWidth","wave","getChannelData","pointCnt","step","Math","ceil","getBoundArray","drawPoint","x","y","height","fillRect","forEach","bound","min","max","drawWaveform","canvas","markerStyle","position","waveStyle","getContext","clearRect","canvasSize","fillStyle","color","animate","concat","getBounds","slice","values","reduce","total","v"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;;AAIA,SAASC,kBAAT,CAA4BC,GAA5B,EAAiC;AAAE,MAAIC,KAAK,CAACC,OAAN,CAAcF,GAAd,CAAJ,EAAwB;AAAE,SAAK,IAAIG,CAAC,GAAG,CAAR,EAAWC,IAAI,GAAGH,KAAK,CAACD,GAAG,CAACK,MAAL,CAA5B,EAA0CF,CAAC,GAAGH,GAAG,CAACK,MAAlD,EAA0DF,CAAC,EAA3D,EAA+D;AAAEC,MAAAA,IAAI,CAACD,CAAD,CAAJ,GAAUH,GAAG,CAACG,CAAD,CAAb;AAAmB;;AAAC,WAAOC,IAAP;AAAc,GAA7H,MAAmI;AAAE,WAAOH,KAAK,CAACK,IAAN,CAAWN,GAAX,CAAP;AAAyB;AAAE;AAEnM;AACA;AACA;;;AACA,IAAIO,WAAW,GAAG,SAASA,WAAT,CAAqBC,GAArB,EAA0BC,MAA1B,EAAkCC,KAAlC,EAAyCC,MAAzC,EAAiD;AACjE,MAAIC,WAAW,GAAGC,SAAS,CAACR,MAAV,GAAmB,CAAnB,IAAwBQ,SAAS,CAAC,CAAD,CAAT,KAAiBC,SAAzC,GAAqDD,SAAS,CAAC,CAAD,CAA9D,GAAoE,CAAtF;;AAEA,MAAID,WAAW,IAAI,GAAnB,EAAwB;AACtBG,IAAAA,UAAU,CAAC,YAAY;AACrBC,MAAAA,qBAAqB,CAAC,YAAY;AAChC,eAAOC,UAAU,CAACT,GAAD,EAAMC,MAAN,EAAcC,KAAd,EAAqBC,MAArB,EAA6BC,WAAW,GAAG,GAA3C,CAAjB;AACD,OAFoB,CAArB;AAGAL,MAAAA,WAAW,CAACC,GAAD,EAAMC,MAAN,EAAcC,KAAd,EAAqBC,MAArB,EAA6BC,WAAW,GAAG,CAA3C,CAAX;AACD,KALS,EAKP,CALO,CAAV;AAMD;AACF,CAXD;AAYA;AACA;AACA;;;AACA,IAAIM,iBAAiB,GAAGrB,OAAO,CAACqB,iBAAR,GAA4B,SAASA,iBAAT,CAA2BC,MAA3B,EAAmCC,KAAnC,EAA0CC,UAA1C,EAAsD;AACxG,MAAI,CAACF,MAAL,EAAa,OAAO,EAAP,CAD2F,CAExG;;AACA,MAAIG,IAAI,GAAGH,MAAM,CAACI,cAAP,CAAsB,CAAtB,CAAX;AACA,MAAIC,QAAQ,GAAGJ,KAAK,GAAGC,UAAvB,CAJwG,CAKxG;;AACA,MAAII,IAAI,GAAGC,IAAI,CAACC,IAAL,CAAUL,IAAI,CAACjB,MAAL,GAAcmB,QAAxB,CAAX,CANwG,CAOxG;;AACA,SAAOI,aAAa,CAACN,IAAD,EAAOE,QAAP,EAAiBC,IAAjB,CAApB;AACD,CATD;AAUA;AACA;AACA;;;AACA,IAAII,SAAS,GAAG,SAASA,SAAT,CAAmBrB,GAAnB,EAAwBsB,CAAxB,EAA2BC,CAA3B,EAA8BX,KAA9B,EAAqCY,MAArC,EAA6C;AAC3DxB,EAAAA,GAAG,CAACyB,QAAJ,CAAaH,CAAb,EAAgBC,CAAhB,EAAmBX,KAAnB,EAA0BY,MAA1B;AACD,CAFD;AAGA;AACA;AACA;;;AACA,IAAIf,UAAU,GAAG,SAASA,UAAT,CAAoBT,GAApB,EAAyBC,MAAzB,EAAiCC,KAAjC,EAAwCC,MAAxC,EAAgD;AAC/D,MAAIC,WAAW,GAAGC,SAAS,CAACR,MAAV,GAAmB,CAAnB,IAAwBQ,SAAS,CAAC,CAAD,CAAT,KAAiBC,SAAzC,GAAqDD,SAAS,CAAC,CAAD,CAA9D,GAAoE,CAAtF;AAEAJ,EAAAA,MAAM,CAACyB,OAAP,CAAe,UAAUC,KAAV,EAAiBhC,CAAjB,EAAoB;AACjC0B,IAAAA,SAAS,CAACrB,GAAD,EAAML,CAAC,GAAGO,KAAK,CAACW,UAAhB,EAA4B,CAAC,IAAIc,KAAK,CAACC,GAAX,IAAkBzB,MAA9C,EAAsDD,KAAK,CAACW,UAA5D,EAAwEK,IAAI,CAACW,GAAL,CAAS,CAAT,EAAY,CAACF,KAAK,CAACE,GAAN,GAAYF,KAAK,CAACC,GAAnB,IAA0BzB,MAAtC,IAAgDC,WAAxH,CAAT;AACD,GAFD;AAGD,CAND;AAOA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAI0B,YAAY,GAAGzC,OAAO,CAACyC,YAAR,GAAuB,SAASA,YAAT,CAAsB7B,MAAtB,EAA8B8B,MAA9B,EAAsCC,WAAtC,EAAmD;AAC3F,MAAIC,QAAQ,GAAG5B,SAAS,CAACR,MAAV,GAAmB,CAAnB,IAAwBQ,SAAS,CAAC,CAAD,CAAT,KAAiBC,SAAzC,GAAqDD,SAAS,CAAC,CAAD,CAA9D,GAAoE,CAAC,CAApF;AACA,MAAI6B,SAAS,GAAG7B,SAAS,CAAC,CAAD,CAAzB;AACA,MAAImB,MAAM,GAAGnB,SAAS,CAACR,MAAV,GAAmB,CAAnB,IAAwBQ,SAAS,CAAC,CAAD,CAAT,KAAiBC,SAAzC,GAAqDD,SAAS,CAAC,CAAD,CAA9D,GAAoE,GAAjF;AACA,MAAIO,KAAK,GAAGP,SAAS,CAAC,CAAD,CAArB;AAEA,MAAI,CAAC0B,MAAD,IAAW,CAAC9B,MAAZ,IAAsB,CAACA,MAAM,CAACJ,MAAlC,EAA0C;AAC1C,MAAIG,GAAG,GAAG+B,MAAM,CAACI,UAAP,CAAkB,IAAlB,CAAV,CAP2F,CAQ3F;;AACAnC,EAAAA,GAAG,CAACoC,SAAJ,CAAc,CAAd,EAAiB,CAAjB,EAAoBL,MAAM,CAACnB,KAA3B,EAAkCmB,MAAM,CAACP,MAAzC,EAT2F,CAU3F;;AACA,MAAIa,UAAU,GAAG;AACfb,IAAAA,MAAM,EAAEO,MAAM,CAACP,MAAP,GAAgBA,MADT;AAEfZ,IAAAA,KAAK,EAAEmB,MAAM,CAACnB,KAAP,GAAeA;AAFP,GAAjB,CAX2F,CAe3F;;AACAZ,EAAAA,GAAG,CAACsC,SAAJ,GAAgBJ,SAAS,CAACK,KAA1B,CAhB2F,CAiB3F;;AACA,MAAIpC,MAAM,GAAGkC,UAAU,CAACb,MAAX,GAAoB,CAAjC;;AACA,MAAIU,SAAS,CAACM,OAAd,EAAuB;AACrBzC,IAAAA,WAAW,CAACC,GAAD,EAAMC,MAAN,EAAciC,SAAd,EAAyB/B,MAAzB,EAAiC,CAAjC,CAAX;AACD,GAFD,MAEO;AACLM,IAAAA,UAAU,CAACT,GAAD,EAAMC,MAAN,EAAciC,SAAd,EAAyB/B,MAAzB,CAAV;AACD;AACF,CAxBD;AAyBA;AACA;AACA;;;AACA,IAAIiB,aAAa,GAAG,SAASA,aAAT,CAAuBN,IAAvB,EAA6BE,QAA7B,EAAuCC,IAAvC,EAA6C;AAC/D,MAAIhB,MAAM,GAAG,EAAb;;AACA,OAAK,IAAIN,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGqB,QAApB,EAA8BrB,CAAC,EAA/B,EAAmC;AACjC;AACAM,IAAAA,MAAM,GAAG,GAAGwC,MAAH,CAAUlD,kBAAkB,CAACU,MAAD,CAA5B,EAAsC,CAACyC,SAAS,CAAC5B,IAAI,CAAC6B,KAAL,CAAWhD,CAAC,GAAGsB,IAAf,EAAqBtB,CAAC,GAAGsB,IAAJ,GAAWA,IAAhC,CAAD,CAAV,CAAtC,CAAT;AACD;;AACD,SAAOhB,MAAP;AACD,CAPD;AAQA;AACA;AACA;;;AACA,IAAIyC,SAAS,GAAG,SAASA,SAAT,CAAmBE,MAAnB,EAA2B;AACzC,SAAOA,MAAM,CAACC,MAAP,CAAc,UAAUC,KAAV,EAAiBC,CAAjB,EAAoB;AACvC,WAAO;AACLlB,MAAAA,GAAG,EAAEkB,CAAC,GAAGD,KAAK,CAACjB,GAAV,GAAgBkB,CAAhB,GAAoBD,KAAK,CAACjB,GAD1B;AAELD,MAAAA,GAAG,EAAEmB,CAAC,GAAGD,KAAK,CAAClB,GAAV,GAAgBmB,CAAhB,GAAoBD,KAAK,CAAClB;AAF1B,KAAP;AAID,GALM,EAKJ;AAAEC,IAAAA,GAAG,EAAE,CAAC,GAAR;AAAaD,IAAAA,GAAG,EAAE;AAAlB,GALI,CAAP;AAMD,CAPD","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\n/**\n * Animate the drawing of the wave\n */\nvar animateWave = function animateWave(ctx, bounds, style, maxAmp) {\n  var scaleFactor = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\n\n  if (scaleFactor <= 100) {\n    setTimeout(function () {\n      requestAnimationFrame(function () {\n        return drawPoints(ctx, bounds, style, maxAmp, scaleFactor / 100);\n      });\n      animateWave(ctx, bounds, style, maxAmp, scaleFactor + 1);\n    }, 1);\n  }\n};\n/**\n * Calculate all wave data points\n */\nvar calculateWaveData = exports.calculateWaveData = function calculateWaveData(buffer, width, pointWidth) {\n  if (!buffer) return [];\n  // get the wave data\n  var wave = buffer.getChannelData(0);\n  var pointCnt = width / pointWidth;\n  // find how many steps we are going to draw\n  var step = Math.ceil(wave.length / pointCnt);\n  // Get array of bounds of each step\n  return getBoundArray(wave, pointCnt, step);\n};\n/**\n * Convienence function to draw a point in waveform\n */\nvar drawPoint = function drawPoint(ctx, x, y, width, height) {\n  ctx.fillRect(x, y, width, height);\n};\n/**\n * Draw all the points in the wave\n */\nvar drawPoints = function drawPoints(ctx, bounds, style, maxAmp) {\n  var scaleFactor = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\n\n  bounds.forEach(function (bound, i) {\n    drawPoint(ctx, i * style.pointWidth, (1 + bound.min) * maxAmp, style.pointWidth, Math.max(1, (bound.max - bound.min) * maxAmp) * scaleFactor);\n  });\n};\n/**\n * Draw a waveform on a canvas\n * buffer - waveform buffer\n * canvas - HTML5 canvas reference\n * style - line style to use (color)\n */\nvar drawWaveform = exports.drawWaveform = function drawWaveform(bounds, canvas, markerStyle) {\n  var position = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : -1;\n  var waveStyle = arguments[4];\n  var height = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 300;\n  var width = arguments[6];\n\n  if (!canvas || !bounds || !bounds.length) return;\n  var ctx = canvas.getContext('2d');\n  // clear the canvas\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  // get our canvas size\n  var canvasSize = {\n    height: canvas.height = height,\n    width: canvas.width = width\n  };\n  // set up line style\n  ctx.fillStyle = waveStyle.color;\n  // find the max height we can draw\n  var maxAmp = canvasSize.height / 2;\n  if (waveStyle.animate) {\n    animateWave(ctx, bounds, waveStyle, maxAmp, 1);\n  } else {\n    drawPoints(ctx, bounds, waveStyle, maxAmp);\n  }\n};\n/**\n * Calculate the bounds of each step in the buffer\n */\nvar getBoundArray = function getBoundArray(wave, pointCnt, step) {\n  var bounds = [];\n  for (var i = 0; i < pointCnt; i++) {\n    // get the max and min values at this step\n    bounds = [].concat(_toConsumableArray(bounds), [getBounds(wave.slice(i * step, i * step + step))]);\n  }\n  return bounds;\n};\n/**\n * Get the max and min values of an array\n */\nvar getBounds = function getBounds(values) {\n  return values.reduce(function (total, v) {\n    return {\n      max: v > total.max ? v : total.max,\n      min: v < total.min ? v : total.min\n    };\n  }, { max: -1.0, min: 1.0 });\n};"]},"metadata":{},"sourceType":"script"}